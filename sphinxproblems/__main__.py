import os
import sys
import problems
import sphinxerrorparser
import patchhtml

debug=False

#-----------------------------------------------------------------------------------------------


def findProblemsFromFile(sphinxRootDirectory, problemFile, problemManager=None):
    """
    Fill a problem manager with problems found in the problem file
    and return it. If a problem manager is provided fill this one
    otherwise create a new one. Always returned the problem manager.
    :param sphinxRootDirectory: the sphinx root directory.
    :param problemFile: the error file generated by sphinx
    :return: ProblemManager. Either created or completed.
    """
    if problemManager is None:
        problem_manager = problems.ProblemManager(sphinxRootDirectory=sphinxRootDirectory)
    else:
        problem_manager = problemManager
    new_problem_founds = sphinxerrorparser.parseErrorFile(sphinxRootDirectory, problemFile, problem_manager)
    return problem_manager

def generateRstProblemFile(rstProblemFile, problemManager):
    content = problemManager.summary()
    with open(rstProblemFile, 'w') as f:
        f.write(content)
    if debug:
        print "%s saved (%d bytes)" % (rstProblemFile, len(content))

def generateSummaryProblemFile(summaryProblemFile, problemManager):
    content = problemManager.shortStatus()
    with open(summaryProblemFile, 'w') as f:
        f.write(content)
    if debug:
        print "%s saved (%d bytes)" % (summaryProblemFile, len(content))

def problemsToRST(sphinxRoot, htmlRoot, rawProblemFile, summaryProblemFile, rstProblemFile):
    problem_manager = findProblemsFromFile(sphinxRoot, rawProblemFile)
    generateRstProblemFile(rstProblemFile, problem_manager)
    generateSummaryProblemFile(summaryProblemFile, problem_manager)


#-----------------------------------------------------------------------------------------------



def patchHTMLFiles(htmlRoot, summaryFile):
    with open(summaryFile,'r') as f:
        summary = f.read()
    patchhtml.processFiles(htmlRoot, summary)

if __name__ == '__main__':
    command = sys.argv[1]
    sphinx_root = sys.argv[2]
    html_root = sys.argv[3]
    raw_problem_file = os.path.join(html_root,'sphinx-problems.txt')
    rst_problem_file = os.path.join(sphinx_root,'.infra','docs','problems','sphinx-problems.rst')
    summary_problem_file = os.path.join(html_root,'sphinx-problems-summary.txt')
    if not os.path.isfile(raw_problem_file):
        print 'no problem found'
    else:
        if command=='problemsToRST':
            problemsToRST(sphinx_root, html_root, raw_problem_file, summary_problem_file, rst_problem_file)
        elif command=='patchHTMLFiles':
            patchHTMLFiles(html_root, summary_problem_file)
        else:
            raise ValueError('%s: command not found. Select either "problemsToRST" or "patchHTMLFiles" ' % command)

